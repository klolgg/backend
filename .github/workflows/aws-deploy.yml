name: Deploy to Amazon EC2(was)

on:
  push:
    branches: [ "main" ]

env:
  AWS_REGION: ap-northeast-2                   # set this to your preferred AWS region, e.g. us-west-1
  ECR_REPOSITORY: klol/was           # set this to your Amazon ECR repository name
  CONTAINER_NAME: klol-server           # set this to the name of the container in the
  JAR_FILE_NAME: app-0.0.1-SNAPSHOT.jar
  TARGET_FILE_NAME: app.jar

permissions:
  contents: read

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment: production

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4.4.0
        with:
          distribution: 'temurin' # 배포판을 지정해야 함
          java-version: '17'
          java-package: jdk

      - name: Build with Gradle
        run: |
          ./gradlew build -x test

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Delete all images of Amazon ECR # 과금 문제로 image:latest 1개만 유지하기 위해 모두 삭제.
        run: |
          REPO_NAME=${{ env.ECR_REPOSITORY }}  # ECR 저장소 이름
          IMAGE_DIGESTS=$(aws ecr list-images --repository-name $REPO_NAME --query 'imageIds[*]' --output json)
          
          if [[ $IMAGE_DIGESTS == "[]" ]]; then
            echo "No images found in repository."
          else
            echo "Deleting all images..."
            aws ecr batch-delete-image --repository-name $REPO_NAME --image-ids "$IMAGE_DIGESTS"
          fi

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: latest
        run: |
          cp build/libs/${{ env.JAR_FILE_NAME }} ${{ env.TARGET_FILE_NAME }}
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

